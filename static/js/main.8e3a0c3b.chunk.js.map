{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["geojson","data","colorFree","colorReserved","colorOccupied","colorTextActive","colorInactive","Map","ReactMapboxGl","accessToken","MapOverlay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","style","fontFamily","fontSize","color","backgroundColor","borderRadius","position","padding","top","left","height","react_default","a","createElement","radii","number","React","Component","LegendItem","_this2","width","display","verticalAlign","textAlign","paddingLeft","textColor","text","PopupTooltip","_this3","free","locColorFree","locColorTextFree","push","title","value","res","locColorOccupied","locColorTextOccupied","chld","locColorReserved","locColorTextReserved","lib_esm","coordinates","lat","long","anchor","offset","bottom-left","bottom","bottom-right","dist_default","label","labelStyle","totalValue","total","radius","lineWidth","labelPosition","lengthAngle","ratio","App_LegendItem","InfoLayer","_this4","createPopups","popupsList","features","forEach","element","App_PopupTooltip","geometry","properties","reserved","childrens","palces","console","log","MapComponent","_this5","onZoom","map","getZoom","state","showMap","toogleShowMap","onMove","center","getBounds","getCenter","pointCenter","turf","lng","resetRenderedData","zoom","renderedData","type","name","places","actualFeaturesList","initData","featureCoordinates","featurePoint","distanceToCenter","length","setState","getCurrentData","_this6","containerStyle","onStyleLoad","el","onMoveEnd","App_InfoLayer","App_MapOverlay","App","className","App_MapComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e3a0c3b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactMapboxGl, { Popup, RotationControl, ZoomControl} from 'react-mapbox-gl';\nimport PieChart from 'react-minimal-pie-chart';\nimport './App.css';\nimport data from \"./data/kindergartes_info_osm_proc.json\";\nimport * as turf from '@turf/turf'\n\nconst geojson = data;\n/*{\n  \"type\": \"FeatureCollections\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"129\",\n        \"childrens\": 20,\n        \"places\": 29,\n        \"reserved\": 5,\n        \"free\": 4\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          30.628101825714094,\n          50.45005475483897\n        ]\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"131\",\n        \"childrens\": 61,\n        \"places\": 77,\n        \"reserved\": 7,\n        \"free\": 9\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          30.505964756011963,\n          50.398745609325054\n        ]\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"150\",\n        \"childrens\": 62,\n        \"places\": 63,\n        \"reserved\": 1,\n        \"free\": 0\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          30.44935941696166,\n          50.38228812291681\n        ]\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"196\",\n        \"childrens\": 67,\n        \"places\": 94,\n        \"reserved\": 23,\n        \"free\": 4\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          30.4504644870758,\n          50.38290384245888\n        ]\n      }\n    }\n  ]\n};*/\n\n// colors for sectors in donout chart\nconst colorFree = \"#E38627\";\nconst colorReserved = \"#6A2135\";\nconst colorOccupied = \"#C13C37\";\n\n// color for active text\nconst colorTextActive = \"#0A0A28\"\n\n// color for inactive item in legend for donout chart\nconst colorInactive = \"#D3D3D3\"\n\nconst Map = ReactMapboxGl({\n  accessToken: 'pk.eyJ1IjoiZGVuaXNrb25vbmVua28iLCJhIjoiY2pnY2QwanM4MDJuYjJxdGN6cWN4d2dkcSJ9.uih5MR-tgpbVwBsooCFhgw'\n});\n\nclass MapOverlay extends React.Component {\n  constructor(props){\n    super(props);\n    this.style = {\n      fontFamily: \"Roboto\", \n      fontSize: \"12px\",\n      color: colorTextActive,\n      backgroundColor: \"#fff\",\n      borderRadius: \"3px\",\n      position: \"absolute\",\n      padding: \"10px\",\n      top: \"10px\",\n      left: \"10px\",\n      height: \"20px\"\n    }\n  }\n  render(){\n    return(\n      <div style={this.style}>\n        <div>Kindergartens number in the circle area of <b>{this.props.radii}</b> km radii:  <b>{this.props.number}</b></div>\n      </div>\n    )\n  }\n}\n\nclass LegendItem extends React.Component {\n  constructor(props){\n    super(props);\n    this.style = {\n      backgroundColor: props.color,\n      height: \"4px\",\n      width: \"4px\",\n      padding: \"5px\",\n      display: \"inline-block\",\n      verticalAlign: \"middle\",\n      textAlign: \"center\"\n    }\n  }\n  render(){\n    return(\n      <div style={{textAlign: \"left\", paddingLeft: \"12px\"}}>\n        <div style={this.style}></div>\n        <div style={{display: \"inline-block\", paddingLeft: \"5px\", verticalAlign: \"middle\", textAlign: \"center\", fontFamily: \"Roboto\", fontSize: \"12px\", color: this.props.textColor}}>{this.props.text}</div>\n      </div>\n    )\n  }\n}\n\nclass PopupTooltip extends React.Component {\n  constructor(props){\n    super(props);\n    this.data = [];\n  \n    if (this.props.free !== 0){\n      // init colors of legend symbol and colors of legend text\n      this.locColorFree = colorFree;\n      this.locColorTextFree = colorTextActive;\n      this.data.push({\n        title: 'Free',\n        value:  this.props.free,\n        color:  this.locColorFree\n      })\n    } else {\n      this.locColorFree = colorInactive;\n      this.locColorTextFree = colorInactive;\n    }\n\n    if (this.props.res !== 0){\n      // init colors of legend symbol and colors of legend text\n      this.locColorOccupied = colorOccupied;\n      this.locColorTextOccupied = colorTextActive;\n      this.data.push({\n        title: 'Reserved',\n        value:  this.props.res,\n        color:  this.locColorOccupied\n      })\n    } else {\n      this.locColorOccupied = colorInactive;\n      this.locColorTextOccupied = colorInactive;\n    }\n\n    if (this.props.chld !== 0){\n      // init colors of legend symbol and colors of legend text\n      this.locColorReserved = colorReserved;\n      this.locColorTextReserved = colorTextActive;\n      this.data.push({\n        title: 'Childrens',\n        value:  this.props.chld,\n        color:  this.locColorReserved\n      })\n    } else {\n      this.locColorReserved = colorInactive;\n      this.locColorTextReserved = colorInactive;\n    }\n  }\n  render(){\n    return(\n      <Popup\n      coordinates={[this.props.lat, this.props.long]}\n      anchor={\"bottom\"}\n      offset={{\n        'bottom-left': [12, -12],  'bottom': [0, -12], 'bottom-right': [-12, -12]\n      }}>\n      <PieChart\n      data={this.data}\n      label\n      labelStyle={{\n        fontSize: '9px',\n        fontFamily: 'Roboto'\n      }}\n      totalValue={this.props.total}\n      radius={42}\n      lineWidth={20}\n      labelPosition={66}\n      style={{height: '100px', width: '160px'}}\n      lengthAngle={-180}\n      ratio={2}\n      />\n      <LegendItem color={this.locColorFree} textColor={this.locColorTextFree} text={\"Вільних місць\"}/>\n      <LegendItem color={this.locColorOccupied} textColor={this.locColorTextOccupied} text={\"Зайнятих\"}/>\n      <LegendItem color={this.locColorReserved} textColor={this.locColorTextReserved} text={\"Зарезервованих\"}/>\n      </Popup>\n    )\n  }\n}\n\nclass InfoLayer extends React.Component {\n  constructor(props){\n    super(props);\n    this.features = props.geojson.features;\n  }\n\n  createPopups = () => {\n    let popupsList = [];\n    this.features.forEach(element => {\n      popupsList.push(<PopupTooltip lat={element.geometry.coordinates[0]} long={element.geometry.coordinates[1]} free={element.properties.free} res={element.properties.reserved} chld={element.properties.childrens} total={element.properties.palces}/>);\n    });\n    return popupsList;\n  }\n\n  render(){\n    console.log(this.createPopups());\n    return(\n      <div>\n        {this.createPopups()}\n      </div>\n    )\n  }\n}\n\nclass MapComponent extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n                  showMap: false,\n                  zoom: [15],\n                  center: [30.4506825, 50.382702],\n                  renderedData: {\n                    \"type\": \"FeatureCollections\",\n                    \"features\": [\n                      {\n                        \"type\": \"Feature\",\n                        \"properties\": {\n                          \"name\": \"129\",\n                          \"childrens\": 20,\n                          \"places\": 29,\n                          \"reserved\": 5,\n                          \"free\": 4\n                        },\n                        \"geometry\": {\n                          \"type\": \"Point\",\n                          \"coordinates\": [\n                            30.628101825714094,\n                            50.45005475483897\n                          ]\n                        }\n                      }]}\n                };\n  }\n\n  getCurrentData(center){\n    let actualFeaturesList = {\"type\": \"FeatureCollection\", \"features\": []};\n    let threshold = 2; // radii of feature rendering in kilometers\n\n    this.props.initData.features.forEach(element => {\n      let featureCoordinates = [element.geometry.coordinates[1], element.geometry.coordinates[0]];\n      let featurePoint = turf.point(featureCoordinates);\n      let distanceToCenter = turf.distance(center, featurePoint);\n      console.log(\"first point: \" + featurePoint.geometry.coordinates + \",   second point: \" + center.geometry.coordinates);\n      console.log(\"Distnace to center   \" + distanceToCenter);\n      // compare distance between center of map bounds and the feature point to the threshold distance, \n      // if it is less than threshold include corresponding feature to the rendered list\n      if (distanceToCenter <= threshold){\n        actualFeaturesList.features.push(element);\n        console.log('elements ' + element);\n      }\n    })\n    console.log(\"Features in the view area:  \" + actualFeaturesList.features.length);\n    return actualFeaturesList;\n  }\n\n  resetRenderedData(center){\n    this.setState({showMap: this.state.showMap, zoom: this.state.zoom, center: this.state.center, renderedData: this.getCurrentData(center)});\n  }\n\n  toogleShowMap(){\n    this.setState({showMap: !this.state.showMap, zoom: this.state.zoom, center: this.state.center, renderedData: this.state.renderedData});\n  }\n\n  onZoom = () => {\n    if (this.map.getZoom() >= 18 && !this.state.showMap){\n      console.log('\\nzoom: ' + this.map.getZoom() + \"  show info\");\n      this.toogleShowMap();\n    }\n    else if (this.map.getZoom() <= 18 && this.state.showMap){\n      console.log('\\nzoom: ' + this.map.getZoom() + \"  hide info\");\n      this.toogleShowMap();\n    }           \n  }\n\n  onMove = () => {\n    let bounds = this.map.getBounds();\n    let center = bounds.getCenter();\n    let pointCenter = turf.point([center.lat, center.lng]);\n    \n    this.resetRenderedData(pointCenter);\n  }\n\n  render(){\n    return(\n      <Map\n      style={\"https://api.maptiler.com/maps/3facac85-4f4f-4917-9926-bef23b53a487/style.json?key=brAq6ZyIGL19175g0ZdK\"}\n      center={this.state.center}\n      zoom={this.state.zoom}\n      containerStyle={{\n        height: '100vh',\n        width: '100vw'\n      }}\n      onStyleLoad={ el => this.map = el }\n      onZoom={this.onZoom}\n      onMoveEnd={this.onMove}>\n      <RotationControl position=\"bottom-right\"/>\n      <ZoomControl position=\"bottom-right\"/>\n      {this.state.showMap && <InfoLayer geojson={this.state.renderedData}/>}\n      <MapOverlay radii={2} number={this.state.renderedData.features.length}/>\n      </Map>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MapComponent initData={geojson}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}